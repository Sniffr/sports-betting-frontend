import { useState, useEffect } from 'react'
import './App.css'
import { X, TrendingUp, RefreshCw } from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Card } from '@/components/ui/card'

const API_KEY = 'a3b186794403af630516172e9184ef1f'

interface Selection {
  id: string
  matchId: string
  match: string
  selection: string
  odds: number
  market: 'h2h' | 'spreads' | 'totals'
  side: 'home' | 'away' | 'draw' | 'over' | 'under'
  point?: number
}

interface PendingBet {
  id: string
  selections: Selection[]
  stake: number
  potentialWin: number
  placedAt: Date
}

interface MarketOdds {
  home: number
  draw?: number
  away: number
}

interface SpreadOdds {
  point: number
  home: number
  away: number
}

interface TotalsOdds {
  point: number
  over: number
  under: number
}

interface Match {
  id: string
  league: string
  homeTeam: string
  awayTeam: string
  time: string
  h2h?: MarketOdds
  spread?: SpreadOdds
  totals?: TotalsOdds
}

interface League {
  key: string
  title: string
}

function App() {
  const [balance, setBalance] = useState(50000)
  const [betSlip, setBetSlip] = useState<Selection[]>([])
  const [stake, setStake] = useState(100)
  const [simulations, setSimulations] = useState(1)
  const [isSimulating, setIsSimulating] = useState(false)
  const [isSimMode, setIsSimMode] = useState(true)
  const [pendingBets, setPendingBets] = useState<PendingBet[]>([])
  const [matches, setMatches] = useState<Match[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [lastFetch, setLastFetch] = useState<number>(0)
  const [requestsRemaining, setRequestsRemaining] = useState<number | null>(null)
  const [leagues, setLeagues] = useState<League[]>([])
  const [activeLeagueKey, setActiveLeagueKey] = useState<string>('soccer_epl')

  const defaultMatches: Match[] = [
    {
      id: '1',
      league: 'English Premier League',
      homeTeam: 'Manchester United',
      awayTeam: 'Liverpool',
      time: 'Today 17:30',
      homeOdds: 2.45,
      drawOdds: 3.20,
      awayOdds: 2.90
    },
    {
      id: '2',
      league: 'English Premier League',
      homeTeam: 'Chelsea',
      awayTeam: 'Arsenal',
      time: 'Today 20:00',
      homeOdds: 2.10,
      drawOdds: 3.40,
      awayOdds: 3.50
    },
    {
      id: '3',
      league: 'La Liga',
      homeTeam: 'Real Madrid',
      awayTeam: 'Barcelona',
      time: 'Tomorrow 19:00',
      homeOdds: 2.20,
      drawOdds: 3.30,
      awayOdds: 3.10
    },
    {
      id: '4',
      league: 'Serie A',
      homeTeam: 'Juventus',
      awayTeam: 'AC Milan',
      time: 'Tomorrow 21:45',
      homeOdds: 1.95,
      drawOdds: 3.60,
      awayOdds: 3.80
    },
    {
      id: '5',
      league: 'Bundesliga',
      homeTeam: 'Bayern Munich',
      awayTeam: 'Borussia Dortmund',
      time: 'Saturday 16:30',
      homeOdds: 1.75,
      drawOdds: 3.80,
      awayOdds: 4.50
    },
    {
      id: '6',
      league: 'Ligue 1',
      homeTeam: 'PSG',
      awayTeam: 'Marseille',
      time: 'Saturday 20:00',
      homeOdds: 1.50,
      drawOdds: 4.20,
      awayOdds: 6.50
    }
  ]

  const addToBetSlip = (match: Match, selection: 'home' | 'draw' | 'away') => {
    const selectionText = selection === 'home' ? match.homeTeam : selection === 'draw' ? 'Draw' : match.awayTeam
    const odds = selection === 'home' ? match.homeOdds : selection === 'draw' ? match.drawOdds : match.awayOdds
    
    const newSelection: Selection = {
      id: `${match.id}-${selection}`,
      matchId: match.id,
      match: `${match.homeTeam} vs ${match.awayTeam}`,
      selection: selectionText,
      odds: odds
    }

    const exists = betSlip.find(s => s.id === newSelection.id)
    if (!exists) {
      setBetSlip([...betSlip, newSelection])
    }
  }

  const removeFromBetSlip = (id: string) => {
    setBetSlip(betSlip.filter(s => s.id !== id))
  }

  const calculateTotalOdds = () => {
    if (betSlip.length === 0) return 0
    return betSlip.reduce((acc, sel) => acc * sel.odds, 1)
  }

  const calculatePotentialWin = () => {
    return stake * calculateTotalOdds()
  }

  const runSimulation = () => {
    if (betSlip.length === 0 || stake <= 0) return

    setIsSimulating(true)

    setTimeout(() => {
      if (isSimMode) {
        const results = []
        for (let i = 0; i < simulations; i++) {
          const won = Math.random() < 0.3
          results.push(won)
        }

        const wins = results.filter(r => r).length
        const losses = results.length - wins

        const totalStake = stake * simulations
        const totalWinnings = wins * calculatePotentialWin()
        const netProfit = totalWinnings - totalStake

        setBalance(balance + netProfit)
        
        setBetSlip([])
        setIsSimulating(false)

        alert(`Simulation Complete!\n\nWins: ${wins}\nLosses: ${losses}\nTotal Stake: KES ${totalStake.toFixed(2)}\nTotal Winnings: KES ${totalWinnings.toFixed(2)}\nNet Profit: KES ${netProfit.toFixed(2)}\n\nNew Balance: KES ${(balance + netProfit).toFixed(2)}`)
      } else {
        const newBet: PendingBet = {
          id: Date.now().toString(),
          selections: [...betSlip],
          stake: stake,
          potentialWin: calculatePotentialWin(),
          placedAt: new Date()
        }
        
        setBalance(balance - stake)
        setPendingBets([...pendingBets, newBet])
        setBetSlip([])
        setIsSimulating(false)
        
        alert(`Bet Placed!\n\nYour bet has been placed successfully.\nStake: KES ${stake.toFixed(2)}\nPotential Win: KES ${calculatePotentialWin().toFixed(2)}\n\nStake deducted from balance.\nWaiting for match results...\n\nNew Balance: KES ${(balance - stake).toFixed(2)}`)
      }
    }, 1000)
  }

  const settleBet = (betId: string, won: boolean) => {
    const bet = pendingBets.find(b => b.id === betId)
    if (!bet) return

    if (won) {
      setBalance(balance + bet.potentialWin)
      alert(`Bet Won!\n\nStake: KES ${bet.stake.toFixed(2)}\nWinnings: KES ${bet.potentialWin.toFixed(2)}\nProfit: KES ${(bet.potentialWin - bet.stake).toFixed(2)}\n\nNew Balance: KES ${(balance + bet.potentialWin).toFixed(2)}`)
    } else {
      alert(`Bet Lost!\n\nStake: KES ${bet.stake.toFixed(2)}\nLoss: KES ${bet.stake.toFixed(2)}\n\nBalance: KES ${balance.toFixed(2)}`)
    }

    setPendingBets(pendingBets.filter(b => b.id !== betId))
  }

  const resetBalance = () => {
    setBalance(50000)
    setBetSlip([])
    setPendingBets([])
  }

  const fetchOdds = async () => {
    const now = Date.now()
    if (now - lastFetch < 60000) {
      setError('Please wait 60 seconds between refreshes')
      return
    }

    setIsLoading(true)
    setError(null)

    try {
      const response = await fetch(
        `https://api.the-odds-api.com/v4/sports/upcoming/odds?api_key=${API_KEY}&regions=us&markets=h2h&oddsFormat=decimal&dateFormat=iso`
      )

      if (!response.ok) {
        throw new Error(`API error: ${response.status}`)
      }

      const data = await response.json()
      const remaining = response.headers.get('x-requests-remaining')
      if (remaining) {
        setRequestsRemaining(parseInt(remaining))
      }

      const transformedMatches: Match[] = data.slice(0, 6).map((event: any) => {
        const bookmaker = event.bookmakers?.[0]
        const h2hMarket = bookmaker?.markets?.find((m: any) => m.key === 'h2h')
        
        const homeOutcome = h2hMarket?.outcomes?.find((o: any) => o.name === event.home_team)
        const awayOutcome = h2hMarket?.outcomes?.find((o: any) => o.name === event.away_team)
        const drawOutcome = h2hMarket?.outcomes?.find((o: any) => o.name === 'Draw')

        const commenceTime = new Date(event.commence_time)
        const timeStr = commenceTime.toLocaleString('en-US', {
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        })

        return {
          id: event.id,
          league: event.sport_title,
          homeTeam: event.home_team,
          awayTeam: event.away_team,
          time: timeStr,
          homeOdds: homeOutcome?.price || 2.0,
          drawOdds: drawOutcome?.price || 3.0,
          awayOdds: awayOutcome?.price || 2.0
        }
      })

      setMatches(transformedMatches.length > 0 ? transformedMatches : defaultMatches)
      setLastFetch(now)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch odds')
      setMatches(defaultMatches)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchOdds()
  }, [])

  return (
    <div className="min-h-screen bg-gray-900">
      {/* Header */}
      <header className="bg-red-600 text-white p-4 shadow-lg">
        <div className="container mx-auto flex justify-between items-center">
          <div className="flex items-center gap-2">
            <TrendingUp size={32} />
            <h1 className="text-2xl font-bold">Super Bet</h1>
            {requestsRemaining !== null && (
              <span className="text-xs opacity-70 ml-2">
                API: {requestsRemaining} requests left
              </span>
            )}
          </div>
          <div className="flex items-center gap-4">
            <div className="bg-red-700 px-4 py-2 rounded-lg">
              <span className="text-sm opacity-80">Balance</span>
              <div className="text-xl font-bold">KES {balance.toFixed(2)}</div>
            </div>
            <Button 
              onClick={fetchOdds}
              disabled={isLoading}
              variant="outline"
              className="bg-white text-red-600 hover:bg-gray-100"
            >
              <RefreshCw size={16} className={`mr-2 ${isLoading ? 'animate-spin' : ''}`} />
              {isLoading ? 'Loading...' : 'Refresh Odds'}
            </Button>
            <Button 
              onClick={resetBalance}
              variant="outline"
              className="bg-white text-red-600 hover:bg-gray-100"
            >
              <RefreshCw size={16} className="mr-2" />
              Reset
            </Button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <div className="container mx-auto p-4">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          {/* Games Section */}
          <div className="lg:col-span-2">
            <div className="bg-gray-800 rounded-lg p-4 mb-4">
              <h2 className="text-white text-xl font-bold mb-4">Highlights</h2>
              <div className="flex gap-2 mb-4 overflow-x-auto">
                <button className="px-4 py-2 bg-green-600 text-white rounded-lg whitespace-nowrap">Football</button>
                <button className="px-4 py-2 bg-gray-700 text-white rounded-lg whitespace-nowrap">Basketball</button>
                <button className="px-4 py-2 bg-gray-700 text-white rounded-lg whitespace-nowrap">Tennis</button>
                <button className="px-4 py-2 bg-gray-700 text-white rounded-lg whitespace-nowrap">Ice Hockey</button>
              </div>
            </div>

            {/* Error Message */}
            {error && (
              <div className="bg-red-900 border border-red-700 text-red-200 p-4 rounded-lg mb-4">
                {error}
              </div>
            )}

            {/* Loading State */}
            {isLoading && (
              <div className="bg-gray-800 border border-gray-700 text-gray-300 p-4 rounded-lg mb-4 text-center">
                Loading live odds...
              </div>
            )}

            {/* Matches */}
            <div className="space-y-4">
              {matches.map(match => (
                <Card key={match.id} className="bg-gray-800 border-gray-700 p-4">
                  <div className="text-gray-400 text-sm mb-2">{match.league}</div>
                  <div className="text-white text-sm mb-2">{match.time}</div>
                  <div className="grid grid-cols-5 gap-2">
                    <div className="col-span-2 text-white font-medium">
                      <div className="mb-1">{match.homeTeam}</div>
                      <div>{match.awayTeam}</div>
                    </div>
                    <button
                      onClick={() => addToBetSlip(match, 'home')}
                      className="bg-green-600 hover:bg-green-700 text-white rounded-lg p-2 font-bold transition"
                    >
                      {match.homeOdds}
                    </button>
                    <button
                      onClick={() => addToBetSlip(match, 'draw')}
                      className="bg-green-600 hover:bg-green-700 text-white rounded-lg p-2 font-bold transition"
                    >
                      {match.drawOdds}
                    </button>
                    <button
                      onClick={() => addToBetSlip(match, 'away')}
                      className="bg-green-600 hover:bg-green-700 text-white rounded-lg p-2 font-bold transition"
                    >
                      {match.awayOdds}
                    </button>
                  </div>
                  <div className="grid grid-cols-5 gap-2 mt-2">
                    <div className="col-span-2"></div>
                    <div className="text-gray-400 text-xs text-center">1</div>
                    <div className="text-gray-400 text-xs text-center">X</div>
                    <div className="text-gray-400 text-xs text-center">2</div>
                  </div>
                </Card>
              ))}
            </div>
          </div>

          {/* Betslip Section */}
          <div className="lg:col-span-1">
            <Card className="bg-gray-800 border-gray-700 sticky top-4">
              <div className="bg-gray-700 p-4 rounded-t-lg">
                <div className="flex justify-between items-center mb-3">
                  <h3 className="text-white font-bold">Betslip</h3>
                </div>
                <div className="flex gap-2 mb-2">
                  <button
                    onClick={() => setIsSimMode(false)}
                    className={`flex-1 py-2 px-4 rounded-lg font-medium transition ${
                      !isSimMode 
                        ? 'bg-green-600 text-white' 
                        : 'bg-gray-600 text-gray-300 hover:bg-gray-500'
                    }`}
                  >
                    Real
                  </button>
                  <button
                    onClick={() => setIsSimMode(true)}
                    className={`flex-1 py-2 px-4 rounded-lg font-medium transition ${
                      isSimMode 
                        ? 'bg-yellow-500 text-black' 
                        : 'bg-gray-600 text-gray-300 hover:bg-gray-500'
                    }`}
                  >
                    Sim
                  </button>
                </div>
                <div className={`text-xs mt-2 ${isSimMode ? 'text-yellow-400' : 'text-green-400'}`}>
                  {isSimMode 
                    ? 'Place bets with virtually simulated results' 
                    : 'Place real bets with actual balance'}
                </div>
              </div>

              <div className="p-4">
                {betSlip.length === 0 ? (
                  <div className="text-gray-400 text-center py-8">
                    Click on odds to add selections
                  </div>
                ) : (
                  <div className="space-y-3">
                    {betSlip.map(selection => (
                      <div key={selection.id} className="bg-gray-700 p-3 rounded-lg">
                        <div className="flex justify-between items-start mb-2">
                          <div className="flex-1">
                            <div className="text-white text-sm font-medium">{selection.selection}</div>
                            <div className="text-gray-400 text-xs">{selection.match}</div>
                          </div>
                          <button
                            onClick={() => removeFromBetSlip(selection.id)}
                            className="text-gray-400 hover:text-white"
                          >
                            <X size={16} />
                          </button>
                        </div>
                        <div className="text-green-400 font-bold">{selection.odds.toFixed(2)}</div>
                      </div>
                    ))}

                    <div className="border-t border-gray-600 pt-3 mt-3">
                      <div className="mb-3">
                        <label className="text-gray-400 text-sm block mb-1">Stake (KES)</label>
                        <input
                          type="number"
                          value={stake}
                          onChange={(e) => setStake(Number(e.target.value))}
                          className="w-full bg-gray-700 text-white p-2 rounded-lg"
                          min="1"
                        />
                      </div>

                      {isSimMode && (
                        <div className="mb-3">
                          <label className="text-gray-400 text-sm block mb-1">Times to Simulate</label>
                          <div className="flex items-center gap-2">
                            <button
                              onClick={() => setSimulations(Math.max(1, simulations - 1))}
                              className="bg-gray-700 text-white px-3 py-2 rounded-lg"
                            >
                              -
                            </button>
                            <input
                              type="number"
                              value={simulations}
                              onChange={(e) => setSimulations(Math.max(1, Number(e.target.value)))}
                              className="flex-1 bg-gray-700 text-white p-2 rounded-lg text-center"
                              min="1"
                            />
                            <button
                              onClick={() => setSimulations(simulations + 1)}
                              className="bg-green-600 text-white px-3 py-2 rounded-lg"
                            >
                              +
                            </button>
                          </div>
                        </div>
                      )}

                      <div className="bg-gray-700 p-3 rounded-lg mb-3">
                        <div className="flex justify-between text-sm mb-1">
                          <span className="text-gray-400">Total Odds</span>
                          <span className="text-white font-bold">{calculateTotalOdds().toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between text-sm mb-1">
                          <span className="text-gray-400">{isSimMode ? 'Total Stake' : 'Stake'}</span>
                          <span className="text-white font-bold">KES {(isSimMode ? stake * simulations : stake).toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">{isSimMode ? 'Potential Win (per bet)' : 'Potential Win'}</span>
                          <span className="text-green-400 font-bold">KES {calculatePotentialWin().toFixed(2)}</span>
                        </div>
                      </div>

                      <Button
                        onClick={runSimulation}
                        disabled={isSimulating || betSlip.length === 0}
                        className={`w-full ${isSimMode ? 'bg-yellow-500 hover:bg-yellow-600 text-black' : 'bg-green-600 hover:bg-green-700 text-white'} font-bold py-3`}
                      >
                        {isSimulating 
                          ? (isSimMode ? 'Simulating...' : 'Placing Bet...') 
                          : (isSimMode 
                              ? `Run ${simulations} Simulation${simulations > 1 ? 's' : ''}` 
                              : 'Place Bet'
                            )
                        }
                      </Button>

                      <button
                        onClick={() => setBetSlip([])}
                        className="w-full mt-2 text-gray-400 hover:text-white text-sm"
                      >
                        Clear All
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </Card>

            {/* Pending Bets Section */}
            {pendingBets.length > 0 && (
              <Card className="bg-gray-800 border-gray-700 mt-4">
                <div className="bg-gray-700 p-4 rounded-t-lg">
                  <h3 className="text-white font-bold">Pending Bets ({pendingBets.length})</h3>
                  <div className="text-gray-400 text-xs mt-1">
                    Waiting for match results
                  </div>
                </div>
                <div className="p-4 space-y-3">
                  {pendingBets.map(bet => (
                    <div key={bet.id} className="bg-gray-700 p-3 rounded-lg">
                      <div className="space-y-2 mb-3">
                        {bet.selections.map(sel => (
                          <div key={sel.id} className="text-sm">
                            <div className="text-white font-medium">{sel.selection}</div>
                            <div className="text-gray-400 text-xs">{sel.match} @ {sel.odds.toFixed(2)}</div>
                          </div>
                        ))}
                      </div>
                      <div className="border-t border-gray-600 pt-2 mb-3">
                        <div className="flex justify-between text-sm mb-1">
                          <span className="text-gray-400">Stake</span>
                          <span className="text-white">KES {bet.stake.toFixed(2)}</span>
                        </div>
                        <div className="flex justify-between text-sm">
                          <span className="text-gray-400">Potential Win</span>
                          <span className="text-green-400 font-bold">KES {bet.potentialWin.toFixed(2)}</span>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <Button
                          onClick={() => settleBet(bet.id, true)}
                          className="flex-1 bg-green-600 hover:bg-green-700 text-white"
                        >
                          Won
                        </Button>
                        <Button
                          onClick={() => settleBet(bet.id, false)}
                          className="flex-1 bg-red-600 hover:bg-red-700 text-white"
                        >
                          Lost
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </Card>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}

export default App
